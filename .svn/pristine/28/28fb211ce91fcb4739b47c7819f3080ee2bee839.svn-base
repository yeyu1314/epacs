<!--
<template>
  <div style="height:100%">
    <div class="searchContent">
      <el-input placeholder="请输入车牌号" v-model="carNumber" clearable></el-input>

      <el-button
        type="primary"
        style="background: #009688;"
        @click="search"
        icon="el-icon-search"
      >搜索</el-button>
    </div>
    <div>
      <el-table :data="listData" border style="width: 99%">
        <el-table-column prop="carNumber" label="车牌" align="center"></el-table-column>
        <el-table-column label="车辆信息" align="center">
          <template slot-scope="scope">
            <span>{{scope.row.factoryName}}</span>
            <br />
            <span>{{scope.row.seriesName}}</span>
            <br />
            <span>{{scope.row.modelName}}</span>
            <br />
          </template>
        </el-table-column>
        <el-table-column
          prop="inputTime"
          align="center"
          label="下单时间"
          color="#f40"
          :formatter="formartTime"
        ></el-table-column>
        <el-table-column
          prop="orgName"
          align="center"
          label="下单站点"
          v-if="this.orderPageShowOrgName"
        ></el-table-column>
        <el-table-column align="center" label="业务类型">
          <template slot-scope="scope">
            <span>{{scope.row.checkType | type}}</span>
          </template>
        </el-table-column>
        <el-table-column prop="note" align="center" label="故障描述"></el-table-column>
        <el-table-column prop="carCylinder" align="center" label="发动机缸数量"></el-table-column>
        <el-table-column fixed="right" label="操作" align="center" width="220">
          <template slot-scope="scope">
            <div style="display:flex;">
              <el-button
                @click="start(scope.row)"
                type="success"
                style="background: #009688;"
                size="small"
              >开始检测</el-button>
              <el-button @click="frozen(scope.row)" type="danger" size="small">冻结工单</el-button>
            </div>
          </template>
        </el-table-column>
      </el-table>
      <div class="pagination">
        <el-pagination
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
          background
          :current-page="pageNo"
          :page-sizes="[10, 20, 30, 40]"
          :page-size="pageSize"
          layout="total, sizes, prev, pager, next, jumper"
          :total="total"
        ></el-pagination>
      </div>
    </div>
  </div>
</template>

<script>
import net from "../../assets/js/public";
export default {
  data() {
    return {
      orderPageShowOrgName: false,
      listData: [],
      pageNo: 1,
      pageSize: 10,
      total: null,
      carNumber: ""
    };
  },
  created() {
    var signInfo = JSON.parse(sessionStorage.getItem("signInfo"));
    this.orderPageShowOrgName = signInfo.orgId == 0;
    this.getlistData(
      { pageNo: this.pageNo, pageSize: this.pageSize },
      { type: 1 }
    );
  },
  filters: {
    type(d) {
      console.log(d)
      var arr = ["", "检测", "治疗", "检测+治疗"];
      return arr[d];
    }
  },
  methods: {
    formartTime(row) {
      return net.dateFormat(row.inputTime, 1);
    },
    getlistData(param, data) {
      net
        .request("admin/order/queryListPage", "post", param, data)
        .then(res => {
          if (res.retcode == 1) {
            console.log(res)
            this.listData = res.data.rows;
            this.total = res.data.total;
          } else {
            net.message(this, "获取数据失败", "warning");
          }
          console.log(res);
        });
    },
    handleSizeChange(val) {
      this.pageSize = val;
      this.getlistData(
        { pageNo: this.pageNo, pageSize: this.pageSize },
        { type: 1 }
      );
    },
    handleCurrentChange(val) {
      this.pageNo = val;
      this.getlistData(
        { pageNo: this.pageNo, pageSize: this.pageSize },
        { type: 1 }
      );
    },
    // 开始检测
    start(row) {
      net
        .request("admin/order/startTesting", "post", {
          jobId: row.jobId,
          version: row.version
        })
        .then(res => {
          if (res.retcode == 1) {
            net.message(this, res.retmsg, "success");
            var skip = net.isJump("/waitOrder");
            if (skip) {
              this.$router.push({ path: "/onloadPic" });
            } else {
              this.getlistData(
                { pageNo: this.pageNo, pageSize: this.pageSize },
                { type: 1 }
              );
            }
          } else {
            net.message(this, res.retmsg, "warning");
          }
        });
    },
    //冻结
    frozen(row) {
      this.$confirm("此操作将冻结此工单, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        net
          .request("admin/abnormalOrder/frozenByUser", "post", {
            jobId: row.jobId,
            version: row.version
          })
          .then(res => {
            if (res.retcode == 1) {
              net.message(this, "操作成功", "success");
              this.getlistData(
                { pageNo: this.pageNo, pageSize: this.pageSize },
                { carNumber: this.carNumber, type: 1 }
              );
            }
          });
      });
    },
    search() {
      this.getlistData(
        { pageNo: this.pageNo, pageSize: this.pageSize },
        { carNumber: this.carNumber, type: 1 }
      );
    }
  }
};
</script>
<style lang='less' scoped>
.searchContent {
  margin: 10px 0 20px 0;
  display: flex;
  flex-direction: row;
  .el-input&#45;&#45;suffix {
    width: 200px;
    margin-right: 20px;
  }
}
.pagination {
  position: relative;
  margin-top: 20px;
  .el-pagination {
    position: absolute;
    left: 0px;
    .el-pager li:not(.disabled) {
      .active {
        background: #009688 !important;
      }
    }
  }
}
.el-pagination.is-background .el-pager li:not(.disabled).active {
  background: #009688;
}
</style>

-->



<template>
  <div class="ces-main">
    <!--<span>{{tableCols}}</span>-->
    <search-form
            size='medium '
            labelWidth = '80px'
            :searchData = "searchData"
            :searchForm = "searchForm"
            :searchHandle="searchHandle">
    </search-form>
    <ces-table
            :that='that'
            size='small '
            :isSelection='true'
            :isIndex='true'
            :isHandle='true'
            :tableData='tableData'
            :tableCols='tableCols'
            :newBtnList="newBtnList"
            :isPagination='true'
            :tablePage='pagination'
            @CurrentChange = 'CurrentChange'
            @SizeChange = 'SizeChange'
            :longDatas="longDatas"
    >
    </ces-table>
  </div>
</template>

<script>
  import net from "../../assets/js/public";
  import SearchForm from '../form/searchForm'
  import cesTable from '../form/compomentTable'
  import moment from 'moment'
  export default {
    data () {
      return {
        that : this,
        // 查询表单
        searchData:{
          carNumber:null,
        },
        searchForm:[//搜索栏
          {type:'Input',prop:'carNumber',width:'180px',placeholder:'请输入车牌'},
        ],
        searchHandle:[//搜索按钮
          {label:'查询',icon:"el-icon-search",type:'primary',handle:()=>this.searchNews()},
        ],
        tableData : [],// 表格数据
        newBtnList:[],// 按钮列表
        tableCols:[// 表头
          {label:'车牌',prop:'carNumber'},
          {label:'车辆信息',type:'longData'},
          {label:'下单时间',prop:'inputTime'},
          {label:'业务类型',prop:'checkType'},
          {label:'故障描述',prop:'note'},
          {label:'发动机缸数量',prop:'carCylinder'},
          {label:'操作记录',type:'button',}],
        longDatas : [],
        pagination:{//页数...
          pageSize:10,
          pageNum:1,
          total:0
        },
        orderPageShowOrgName : false,
        page: this.$route.params,
      }
    },
    components:{
      cesTable,
      SearchForm,
    },
    methods : {
      // 获取表格数据
      getlistData(param, data) {
        this.tableData = []
        net
                .request("admin/order/queryListPage", "post", param, data)
                .then(res => {
                  if (res.retcode == 1) {
                    const pagination = {
                      pageSize : res.data.pageSize,
                      pageNum : res.data.pageNo,
                      total : res.data.total,
                    }
                    this.pagination = pagination
                  } else {
                    net.message(this, "获取数据失败", "warning");
                  }
                  const tableArr = []
                  const carMsgArr = []
                  const data = res.data.rows
                  console.log(data)
                  //封装表格数据
                  for (let i = 0; i< data.length; i++){
                    tableArr.push({
                      id:i +1,
                      carNumber:data[i].carNumber,//车牌
                      inputTime:moment(data[i].inputTime).format('YYYY-MM-DD HH:MM'),//下单时间
                      checkType:data[i].checkType === 1 ? '检测' : (data[i].checkType === 3 ? '治疗+检测' : '治疗'),//业务类型
                      checkTypeId : data[i].checkType,
                      note:data[i].note,//故障描述
                      carCylinder:data[i].carCylinder,//发动机缸数
                      jobCode : data[i].jobCode,
                      //车辆信息
                      factoryName:data[i].factoryName,
                      seriesName:data[i].seriesName,
                      modelName:data[i].modelName,
                      jobId : data[i].jobId,

                      allData : data[i],
                    })
                    carMsgArr.push({//封装车辆信息格式
                      id : i+1,
                      note:[
                        data[i].factoryName,
                        data[i].seriesName,
                        data[i].modelName,
                      ]
                    })
                  }
                  this.tableData = tableArr
                  this.longDatas = carMsgArr

                  // 按钮的显示隐藏
                  const checkButtonArr = []
                  const checkButtonList = []// 二维数组
                  for (let i = 0; i < tableArr.length; i++) {
                    checkButtonArr.push(
                            {type:'success',label:'开始检测',isShow: true,size:'small ', handle:(that,row)=>this.start(that,row)},
                            {type:'danger',label:'冻结工单',isShow: true,size:'small ', handle:(that,row)=>this.stop(that,row)}
                    )
                  }
                  // 封装按钮格式
                  let checkArr = []
                  checkButtonArr.forEach((c,index) => {
                    if (checkArr.length === 2) {//如果小数组已经满了，创建一个新的  （两个为一组）
                      checkArr = []
                    }
                    if(checkArr.length === 0) {//如果minArr是空的，将小数组保存到大数组中
                      checkButtonList.push({
                        id : index/2 +1,
                        btnList : checkArr
                      })
                    }
                    checkArr.push(c)//将当前分类保存到小数组中
                  })
                  this.newBtnList = checkButtonList

                });
      },

      //翻页
      CurrentChange(val){
        this.pagination.pageNum = val;
        this.getlistData(
                { pageNo: val, pageSize: this.pagination.pageSize },
                { type: 1 }
        );
      },
      //选择 每页显示数量
      SizeChange(val){
        this.pagination.pageSize = val;
        this.getlistData(
                { pageNo: this.pagination.pageNum, pageSize: val },
                { type: 1 }
        );

      },
      //查询
      searchNews(){
        this.getlistData(
                { pageNo: this.pagination.pageNum, pageSize: this.pagination.pageSize },
                { carNumber: this.searchData.carNumber, type: 1 }
        );
      },
      //开始检测
      start(that,row){
        net
                .request("admin/order/startTesting", "post", {
                  jobId: row.jobId,
                  version: row.allData.version
                })
                .then(res => {
                  if (res.retcode == 1) {
                    net.message(this, res.retmsg, "success");
                    var skip = net.isJump("/waitOrder");
                    if (skip) {
                      this.$router.push({ path: "/onloadPic" });
                    } else {
                      this.getlistData(
                              { pageNo: this.pagination.pageNum, pageSize: this.pagination.pageSize },
                              { type: 1 }
                      );
                    }
                  } else {
                    net.message(this, res.retmsg, "warning");
                  }
                });
      },
      //冻结工单
      stop(that,row){
        console.log(that,row)
        this.$confirm("此操作将冻结此工单, 是否继续?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(() => {
          net
                  .request("admin/abnormalOrder/frozenByUser", "post", {
                    jobId: row.jobId,
                    version: row.allData.version
                  })
                  .then(res => {
                    if (res.retcode == 1) {
                      net.message(this, "操作成功", "success");
                      this.getlistData(
                              { pageNo: this.pagination.pageNum, pageSize: this.pagination.pageSize },
                              { carNumber: this.searchData.carNumber, type: 1 }
                      );
                    }
                  });
        });
      }

    },
    created () {
      var signInfo = JSON.parse(sessionStorage.getItem("signInfo"));
      this.orderPageShowOrgName = signInfo.orgId == 0;
      this.getlistData(
              { pageNo: this.pagination.pageNum, pageSize: this.pagination.pageSize },
              { type: 1 }
      );
    },
    computed : {
    },
  }


</script>

<style>

</style>
